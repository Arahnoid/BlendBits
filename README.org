* BlendBits
Collection of blender scripts. From one-liners to panels.

* Script runner
File: =script_runner.py=

[[./images/other-script-runner.png]]

This add-on allows you to organize and run custom Python scripts directly inside
Blender. Scripts are grouped into categories (subfolders), making it easier to
manage large script collections.

- *Set Script Folder*
  Opens a folder picker to select the root folder containing your scripts.
  This folder must contain at least one subfolder with scripts.
  You can name the subfolder however you like, e.g. =main=.


  Example of root folder with subfolders as categories:

  #+begin_src
    scripts/
        main/
            useful_script.py
        modeling/
            bevel_tools.py
            cleanup.py
        rendering/
            setup_cycles.py
            render_preset.py
        other/
            ...
  #+end_src

  By default, Script Runner will look for a =scripts= folder in the same
  directory as the current Blender file.

  *Tip!* If you don’t want to edit the Script Runner code to define a custom
  folder, simply select your scripts folder once and then save the Blender
  startup file. After that, Blender will always start with Script Runner
  pointing to your chosen folder.

- *Refresh*
  Use this button when you add a new subfolder or script.
  It will re-scan the root folder and update the available categories and scripts.

- *Script Category*
  Dropdown to select the subfolder containing your scripts.

- *Script Select*
  Dropdown to select the script you want to run.

- *Run*
  Executes the currently selected script.


Similar blender extensions:

- [[https://extensions.blender.org/add-ons/blender-run-scripts-from-folder/][Run Scripts From Folder]]
- [[https://extensions.blender.org/add-ons/script-manager-pro/][Script Manager Pro]]



* Collection scripts
** Collection name from selection
File: =collection_name_from_selection.py=

[[./images/col-collection_name_from_selection.gif]]

This script renames the *first* (primary) collection of each selected object to
match that object's own name. It is handy when you want the collection hierarchy
to mirror the object names for easier organization.

** Item name from collection
File: =item_name_from_collection.py=

[[./images/col-item_name_from_collection.gif]]

This Blender script renames selected objects to match the name of their
parent(first linked) collection.

** Move selected to collections with suffix
File: =move_selected_to_collections_suffix.py=

[[./images/col-move_selected_to_collections_suffix.gif]]

This Blender script moves each selected object into a new or existing collection
whose name is the object's name plus a configurable suffix. If the object is
already in the correct collection, it will be skipped to avoid unnecessary
unlink/relink operations.

** Selected to collection parented empty
File: =selected_to_collection_parented_empty.py=

[[./images/col-selected_to_collection_parented_empty.gif]]

This Blender script processes each selected mesh object by:
1. Creating an Empty object with the same name (if it doesn’t already exist).
2. Matching the Empty's location, rotation, and scale to the mesh.
3. Parenting the mesh to the Empty without altering world transforms (if not
   already parented).
4. Creating (or reusing) a collection named after the mesh.
5. Moving both the mesh and the Empty into that collection, unlinking them from
   all others.

** Selected to collection
File: =selected_to_collection.py=

[[./images/col-selected_to_collection.gif]]

This Blender script moves each selected object into its own new collection named
after the object. The object will be unlinked from any collections it currently
belongs to, and then linked exclusively to its newly created collection.

* Material scripts
** Delete all materials
File: =delete_all_materials.py=

[[./images/mat-delete_all_materials.gif]]

Delete All Materials from Selected Objects.

Use case. Sometimes when you import =svg= files it creates materials you do not
need. This script helps to delete materials.

** Remove material duplicates
File: =remove_material_duplicates.py=

Remove Material Duplicates in Blender file.

It find materials which share the same base name and have a numerical prefix
e.g. =.001=, =.002= etc. and merges them into one.

Example:
- =Dark_Wood=
- =Dark_Wood.001=
- =Dark_Wood.002=

will be merged into =Dark_Wood=

** Create material palette from selected
File: =create_material_palette_from_selected.py=

[[./images/mat-create_material_palette_from_selected.gif]]

Use case:

When you import models from external sources, you may want to quickly check how
many materials they use and what their names are. This script makes it easier to
visualize materials by creating one UV sphere per material and naming the sphere
after that material.

Features:

- Automatically generates a UV sphere for each unique material.
- Arranges the spheres in a row or a grid with multiple rows.
- Allows you to set a custom name prefix for the spheres.
- Customizable sphere geometry (segments, rings, radius) and spacing.


* Miscellaneous scripts
These are some utility scripts.

** Find heavy meshes in scene
File: =find_heavy_meshes_in_scene.py=

[[./images/other-find_heavy_meshes_in_scene.gif]]

This script scans all objects in the current Blender scene and automatically
selects those mesh objects whose polygon count exceeds a specified threshold
(default: 1,000 polygons).

I use it when I import a lot of meshes into blender file or want to find large or unoptimized meshes in the scene.

** Save file size repport
File: =save_file_size_repport.py=

[[./images/other-save_file_size_repport.gif]]

This script was inspired by [[https://www.youtube.com/@animagraffs][Jake O'Neal]] in the video [[https://www.youtube.com/watch?v=itj2t8Fv8xs][How I recreated Hoover Dam in 3D]].

TL;DR Shows how file size changed in size after save.

This script adds two handlers that monitor the size of the current .blend file
before and after each save operation. When a file is saved, the script compares
the new file size to the previous size and displays a popup showing the change
in megabytes.

** Switch curve direction
File: =switch_curve_direction.py=

[[./images/other-switch_curve_direction.gif]]


Flips the direction of all selected curve objects in Blender.

** Matcap name copy to clipboard
File: =matcap_name_copy_to_clipboard.py=

Copies the active MatCap ID (the ID of the studio light used in the 3‑D viewport shading) to the system clipboard so it can be pasted elsewhere.

This scritp is useful if you use Matcaps from  this [[https://github.com/nidorx/matcaps?tab=readme-ov-file][Matcaps Git Repository]]
which have complex names like this =4F4F4F_9C9C9C_121212_7C7C7C= and you for some reason need to know the name of current matcap.

#  LocalWords:  unlink unlinking unlinked
